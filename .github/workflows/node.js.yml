# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    # environment: testing
    env:
      NEXT_PUBLIC_APP_NAME: gha-pages 
      NEXT_PUBLIC_PASSWORD: ${{secrets.PASSWORD}} 

    runs-on: self-hosted

    strategy:
      matrix:
        node-version: [16.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      # uses: actions/cache@v3
      # with:
      #   # See here for caching with `yarn` https://github.com/actions/cache/blob/main/examples.md#node---yarn or you can leverage caching with actions/setup-node https://github.com/actions/setup-node
      #   path: |
      #     ~/.npm
      #     ${{ github.workspace }}/.next/cache
      #   # Generate a new cache whenever packages or source files change.
      #   key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
      #   # If source files changed but packages didn't, rebuild from a prior cache.
      #   restore-keys: |
      #     ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-


      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        #   npm ci --force
        # npm run build
        # pm2 stop npm
        # pm2 start npm
    - run: | 
        echo "working"
      